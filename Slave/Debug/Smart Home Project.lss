
Smart Home Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000468  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000150  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dab  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000973  00000000  00000000  0000139f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a85  00000000  00000000  00001d12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000210  00000000  00000000  00002798  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ec  00000000  00000000  000029a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002ff  00000000  00000000  00002e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  00003193  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__vector_1>
   8:	0c 94 c3 00 	jmp	0x186	; 0x186 <__vector_2>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 69 01 	call	0x2d2	; 0x2d2 <main>
  64:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_init>:
{
/*	setbit(ADMUX,REFS0);  // external v refrance
	setbit(ADCSRA,ADEN);  // ADC enable
	setbit(ADCSRA,ADPS2);	// pres caller 16 ADC f = 62500 with the range of ADC (50k:200k)Hz
*/
    ADMUX|=(1<<REFS0);//AVCC with external capacitor at AREF pin
  6c:	87 b1       	in	r24, 0x07	; 7
  6e:	80 64       	ori	r24, 0x40	; 64
  70:	87 b9       	out	0x07, r24	; 7
	ADCSRA |=(1<<ADEN);//ADC Enable
  72:	86 b1       	in	r24, 0x06	; 6
  74:	80 68       	ori	r24, 0x80	; 128
  76:	86 b9       	out	0x06, r24	; 6
	//ADC speed must be in range of 50k to 200k HZ
	ADCSRA |=(1<<ADPS2);//PRESCALER 16 --> freq = 62500 Hz
  78:	86 b1       	in	r24, 0x06	; 6
  7a:	84 60       	ori	r24, 0x04	; 4
  7c:	86 b9       	out	0x06, r24	; 6
  7e:	08 95       	ret

00000080 <ADC_read>:
	int adc_value=0;
	//0b01000000 &
	//0b11100000 |
	//0b00000100
//==> 0b01000100
	ADMUX = (ADMUX&0xE0)|ADC_chanel;//choose which ADC will work channel
  80:	97 b1       	in	r25, 0x07	; 7
  82:	90 7e       	andi	r25, 0xE0	; 224
  84:	89 2b       	or	r24, r25
  86:	87 b9       	out	0x07, r24	; 7
	//0xE0 ==> 0b11100000
	ADCSRA |=(1<<ADSC);//ADC Start Conversion
  88:	86 b1       	in	r24, 0x06	; 6
  8a:	80 64       	ori	r24, 0x40	; 64
  8c:	86 b9       	out	0x06, r24	; 6
	while(readbit(ADCSRA,ADIF)==0) //wait until Conversion complete using polling not int
  8e:	34 9b       	sbis	0x06, 4	; 6
  90:	fe cf       	rjmp	.-4      	; 0x8e <ADC_read+0xe>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	83 e0       	ldi	r24, 0x03	; 3
  94:	8a 95       	dec	r24
  96:	f1 f7       	brne	.-4      	; 0x94 <ADC_read+0x14>
  98:	00 00       	nop
	_delay_us(10);//wait until the value store in ADC REG.
	//decimal max 1023
	//2.5v == 512
	//1.25 == 256
	//5    == 1023
	adc_value =(int)ADCL+(int)ADCH*256;//calculate the ADC value
  9a:	24 b1       	in	r18, 0x04	; 4
  9c:	85 b1       	in	r24, 0x05	; 5
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	98 2f       	mov	r25, r24
  a2:	88 27       	eor	r24, r24
	// ADCL 8 bit lower 
	// ADCH 2 bit higher  0b01 =1
	// x = (ADCL =256 )+(ADCH =1*256 )= 512
	//10-bit 11 1111 1111 => 1023 
	return adc_value ;
}
  a4:	82 0f       	add	r24, r18
  a6:	91 1d       	adc	r25, r1
  a8:	08 95       	ret

000000aa <Bulb_on>:
#define readbit(reg,bit) ((reg>>bit)&1)


void Bulb_on(int a)
{
		if(a==1)
  aa:	81 30       	cpi	r24, 0x01	; 1
  ac:	91 05       	cpc	r25, r1
  ae:	31 f4       	brne	.+12     	; 0xbc <Bulb_on+0x12>
		{
		setbit(DDRA,3);
  b0:	2a b3       	in	r18, 0x1a	; 26
  b2:	28 60       	ori	r18, 0x08	; 8
  b4:	2a bb       	out	0x1a, r18	; 26
		setbit(PORTA,3);	
  b6:	2b b3       	in	r18, 0x1b	; 27
  b8:	28 60       	ori	r18, 0x08	; 8
  ba:	2b bb       	out	0x1b, r18	; 27
		}
		if(a==2)
  bc:	82 30       	cpi	r24, 0x02	; 2
  be:	91 05       	cpc	r25, r1
  c0:	31 f4       	brne	.+12     	; 0xce <Bulb_on+0x24>
		{
			setbit(DDRA,4);
  c2:	2a b3       	in	r18, 0x1a	; 26
  c4:	20 61       	ori	r18, 0x10	; 16
  c6:	2a bb       	out	0x1a, r18	; 26
			setbit(PORTA,4);
  c8:	2b b3       	in	r18, 0x1b	; 27
  ca:	20 61       	ori	r18, 0x10	; 16
  cc:	2b bb       	out	0x1b, r18	; 27
		}
		if(a==3)
  ce:	83 30       	cpi	r24, 0x03	; 3
  d0:	91 05       	cpc	r25, r1
  d2:	31 f4       	brne	.+12     	; 0xe0 <Bulb_on+0x36>
		{
			setbit(DDRA,5);
  d4:	2a b3       	in	r18, 0x1a	; 26
  d6:	20 62       	ori	r18, 0x20	; 32
  d8:	2a bb       	out	0x1a, r18	; 26
			setbit(PORTA,5);
  da:	2b b3       	in	r18, 0x1b	; 27
  dc:	20 62       	ori	r18, 0x20	; 32
  de:	2b bb       	out	0x1b, r18	; 27
		}
		if(a==4)
  e0:	84 30       	cpi	r24, 0x04	; 4
  e2:	91 05       	cpc	r25, r1
  e4:	31 f4       	brne	.+12     	; 0xf2 <Bulb_on+0x48>
		{
			setbit(DDRA,6);
  e6:	2a b3       	in	r18, 0x1a	; 26
  e8:	20 64       	ori	r18, 0x40	; 64
  ea:	2a bb       	out	0x1a, r18	; 26
			setbit(PORTA,6);
  ec:	2b b3       	in	r18, 0x1b	; 27
  ee:	20 64       	ori	r18, 0x40	; 64
  f0:	2b bb       	out	0x1b, r18	; 27
		}
		if(a==5)
  f2:	05 97       	sbiw	r24, 0x05	; 5
  f4:	31 f4       	brne	.+12     	; 0x102 <Bulb_on+0x58>
		{
			setbit(DDRA,7);
  f6:	8a b3       	in	r24, 0x1a	; 26
  f8:	80 68       	ori	r24, 0x80	; 128
  fa:	8a bb       	out	0x1a, r24	; 26
			setbit(PORTA,7);
  fc:	8b b3       	in	r24, 0x1b	; 27
  fe:	80 68       	ori	r24, 0x80	; 128
 100:	8b bb       	out	0x1b, r24	; 27
 102:	08 95       	ret

00000104 <Bulb_off>:
		}
}

void Bulb_off(int a)
{
		if(a==1)
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	91 05       	cpc	r25, r1
 108:	31 f4       	brne	.+12     	; 0x116 <Bulb_off+0x12>
		{
			clearbit(DDRA,3);
 10a:	2a b3       	in	r18, 0x1a	; 26
 10c:	27 7f       	andi	r18, 0xF7	; 247
 10e:	2a bb       	out	0x1a, r18	; 26
			clearbit(PORTA,3);
 110:	2b b3       	in	r18, 0x1b	; 27
 112:	27 7f       	andi	r18, 0xF7	; 247
 114:	2b bb       	out	0x1b, r18	; 27
		}
		if(a==2)
 116:	82 30       	cpi	r24, 0x02	; 2
 118:	91 05       	cpc	r25, r1
 11a:	31 f4       	brne	.+12     	; 0x128 <Bulb_off+0x24>
		{
			clearbit(DDRA,4);
 11c:	2a b3       	in	r18, 0x1a	; 26
 11e:	2f 7e       	andi	r18, 0xEF	; 239
 120:	2a bb       	out	0x1a, r18	; 26
			clearbit(PORTA,4);
 122:	2b b3       	in	r18, 0x1b	; 27
 124:	2f 7e       	andi	r18, 0xEF	; 239
 126:	2b bb       	out	0x1b, r18	; 27
		}
		if(a==3)
 128:	83 30       	cpi	r24, 0x03	; 3
 12a:	91 05       	cpc	r25, r1
 12c:	31 f4       	brne	.+12     	; 0x13a <Bulb_off+0x36>
		{
			clearbit(DDRA,5);
 12e:	2a b3       	in	r18, 0x1a	; 26
 130:	2f 7d       	andi	r18, 0xDF	; 223
 132:	2a bb       	out	0x1a, r18	; 26
			clearbit(PORTA,5);
 134:	2b b3       	in	r18, 0x1b	; 27
 136:	2f 7d       	andi	r18, 0xDF	; 223
 138:	2b bb       	out	0x1b, r18	; 27
		}
		if(a==4)
 13a:	84 30       	cpi	r24, 0x04	; 4
 13c:	91 05       	cpc	r25, r1
 13e:	31 f4       	brne	.+12     	; 0x14c <Bulb_off+0x48>
		{
			clearbit(DDRA,6);
 140:	2a b3       	in	r18, 0x1a	; 26
 142:	2f 7b       	andi	r18, 0xBF	; 191
 144:	2a bb       	out	0x1a, r18	; 26
			clearbit(PORTA,6);
 146:	2b b3       	in	r18, 0x1b	; 27
 148:	2f 7b       	andi	r18, 0xBF	; 191
 14a:	2b bb       	out	0x1b, r18	; 27
		}
		if(a==5)
 14c:	05 97       	sbiw	r24, 0x05	; 5
 14e:	31 f4       	brne	.+12     	; 0x15c <Bulb_off+0x58>
		{
			clearbit(DDRA,7);
 150:	8a b3       	in	r24, 0x1a	; 26
 152:	8f 77       	andi	r24, 0x7F	; 127
 154:	8a bb       	out	0x1a, r24	; 26
			clearbit(PORTA,7);
 156:	8b b3       	in	r24, 0x1b	; 27
 158:	8f 77       	andi	r24, 0x7F	; 127
 15a:	8b bb       	out	0x1b, r24	; 27
 15c:	08 95       	ret

0000015e <motor_start>:
#define readbit(reg,bit) ((reg>>bit)&1)


void motor_start(void)
{
	DDRC  |= (1<<PC3 ) | (1<<PC4);// IN1 IN0
 15e:	84 b3       	in	r24, 0x14	; 20
 160:	88 61       	ori	r24, 0x18	; 24
 162:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1<<PC3);
 164:	85 b3       	in	r24, 0x15	; 21
 166:	88 60       	ori	r24, 0x08	; 8
 168:	85 bb       	out	0x15, r24	; 21
	clearbit(PORTC,4);
 16a:	85 b3       	in	r24, 0x15	; 21
 16c:	8f 7e       	andi	r24, 0xEF	; 239
 16e:	85 bb       	out	0x15, r24	; 21
 170:	08 95       	ret

00000172 <motor_stop>:
}

void motor_stop(void)
{
	DDRC  |= (1<<PC3 ) | (1<<PC4);// IN1 IN0
 172:	84 b3       	in	r24, 0x14	; 20
 174:	88 61       	ori	r24, 0x18	; 24
 176:	84 bb       	out	0x14, r24	; 20
	clearbit(PORTC,3);
 178:	85 b3       	in	r24, 0x15	; 21
 17a:	87 7f       	andi	r24, 0xF7	; 247
 17c:	85 bb       	out	0x15, r24	; 21
	clearbit(PORTC,4);
 17e:	85 b3       	in	r24, 0x15	; 21
 180:	8f 7e       	andi	r24, 0xEF	; 239
 182:	85 bb       	out	0x15, r24	; 21
 184:	08 95       	ret

00000186 <__vector_2>:



// int1 --> set bit 5
ISR(INT1_vect)  // interrupt service routine ISR handler --> vetor name ==>table--> address to the function --> process subroutine
{	// the code needed
 186:	1f 92       	push	r1
 188:	0f 92       	push	r0
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	0f 92       	push	r0
 18e:	11 24       	eor	r1, r1
 190:	2f 93       	push	r18
 192:	3f 93       	push	r19
 194:	4f 93       	push	r20
 196:	8f 93       	push	r24
 198:	9f 93       	push	r25
	int x;
	for(x=0;x<7;x++)
 19a:	20 e0       	ldi	r18, 0x00	; 0
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	0f c0       	rjmp	.+30     	; 0x1be <__vector_2+0x38>
	{
		toggelbit(PORTA,5);
 1a0:	9b b3       	in	r25, 0x1b	; 27
 1a2:	80 e2       	ldi	r24, 0x20	; 32
 1a4:	89 27       	eor	r24, r25
 1a6:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a8:	4f e9       	ldi	r20, 0x9F	; 159
 1aa:	86 e8       	ldi	r24, 0x86	; 134
 1ac:	91 e0       	ldi	r25, 0x01	; 1
 1ae:	41 50       	subi	r20, 0x01	; 1
 1b0:	80 40       	sbci	r24, 0x00	; 0
 1b2:	90 40       	sbci	r25, 0x00	; 0
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <__vector_2+0x28>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <__vector_2+0x32>
 1b8:	00 00       	nop

// int1 --> set bit 5
ISR(INT1_vect)  // interrupt service routine ISR handler --> vetor name ==>table--> address to the function --> process subroutine
{	// the code needed
	int x;
	for(x=0;x<7;x++)
 1ba:	2f 5f       	subi	r18, 0xFF	; 255
 1bc:	3f 4f       	sbci	r19, 0xFF	; 255
 1be:	27 30       	cpi	r18, 0x07	; 7
 1c0:	31 05       	cpc	r19, r1
 1c2:	74 f3       	brlt	.-36     	; 0x1a0 <__vector_2+0x1a>
	{
		toggelbit(PORTA,5);
		_delay_ms(500);
	}
}
 1c4:	9f 91       	pop	r25
 1c6:	8f 91       	pop	r24
 1c8:	4f 91       	pop	r20
 1ca:	3f 91       	pop	r19
 1cc:	2f 91       	pop	r18
 1ce:	0f 90       	pop	r0
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	0f 90       	pop	r0
 1d4:	1f 90       	pop	r1
 1d6:	18 95       	reti

000001d8 <__vector_1>:

// int0 --> clear bit 5
ISR(INT0_vect)
{
 1d8:	1f 92       	push	r1
 1da:	0f 92       	push	r0
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	0f 92       	push	r0
 1e0:	11 24       	eor	r1, r1
 1e2:	8f 93       	push	r24
	clearbit(PORTA,5);
 1e4:	8b b3       	in	r24, 0x1b	; 27
 1e6:	8f 7d       	andi	r24, 0xDF	; 223
 1e8:	8b bb       	out	0x1b, r24	; 27
 1ea:	8f 91       	pop	r24
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti

000001f6 <Timer1_init>:
		break;
		//-------------------- 90 degree: Ton = 2ms i.e. 2000u --------------------
		case 180:   OCR1A = (499);
		break;
		//-------------------- 180 degree: Ton = 1ms i.e. 1000u --------------------
		case 0:   OCR1A = (249);
 1f6:	8f b5       	in	r24, 0x2f	; 47
 1f8:	8e 7f       	andi	r24, 0xFE	; 254
 1fa:	8f bd       	out	0x2f, r24	; 47
 1fc:	8f b5       	in	r24, 0x2f	; 47
 1fe:	82 60       	ori	r24, 0x02	; 2
 200:	8f bd       	out	0x2f, r24	; 47
 202:	8e b5       	in	r24, 0x2e	; 46
 204:	88 60       	ori	r24, 0x08	; 8
 206:	8e bd       	out	0x2e, r24	; 46
 208:	8e b5       	in	r24, 0x2e	; 46
 20a:	80 61       	ori	r24, 0x10	; 16
 20c:	8e bd       	out	0x2e, r24	; 46
 20e:	8f b5       	in	r24, 0x2f	; 47
 210:	8f 7b       	andi	r24, 0xBF	; 191
 212:	8f bd       	out	0x2f, r24	; 47
 214:	8f b5       	in	r24, 0x2f	; 47
 216:	80 68       	ori	r24, 0x80	; 128
 218:	8f bd       	out	0x2f, r24	; 47
 21a:	81 b3       	in	r24, 0x11	; 17
 21c:	80 62       	ori	r24, 0x20	; 32
 21e:	81 bb       	out	0x11, r24	; 17
 220:	81 b3       	in	r24, 0x11	; 17
 222:	80 68       	ori	r24, 0x80	; 128
 224:	81 bb       	out	0x11, r24	; 17
 226:	08 95       	ret

00000228 <Timer1_start>:
 228:	8e b5       	in	r24, 0x2e	; 46
 22a:	81 60       	ori	r24, 0x01	; 1
 22c:	8e bd       	out	0x2e, r24	; 46
 22e:	8e b5       	in	r24, 0x2e	; 46
 230:	82 60       	ori	r24, 0x02	; 2
 232:	8e bd       	out	0x2e, r24	; 46
 234:	8e b5       	in	r24, 0x2e	; 46
 236:	8b 7f       	andi	r24, 0xFB	; 251
 238:	8e bd       	out	0x2e, r24	; 46
 23a:	08 95       	ret

0000023c <Timer1_set_freq>:
 23c:	bc 01       	movw	r22, r24
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	0e 94 c8 01 	call	0x390	; 0x390 <__divmodhi4>
 246:	28 ee       	ldi	r18, 0xE8	; 232
 248:	33 e0       	ldi	r19, 0x03	; 3
 24a:	62 9f       	mul	r22, r18
 24c:	a0 01       	movw	r20, r0
 24e:	63 9f       	mul	r22, r19
 250:	50 0d       	add	r21, r0
 252:	72 9f       	mul	r23, r18
 254:	50 0d       	add	r21, r0
 256:	11 24       	eor	r1, r1
 258:	42 9f       	mul	r20, r18
 25a:	c0 01       	movw	r24, r0
 25c:	43 9f       	mul	r20, r19
 25e:	90 0d       	add	r25, r0
 260:	52 9f       	mul	r21, r18
 262:	90 0d       	add	r25, r0
 264:	11 24       	eor	r1, r1
 266:	99 23       	and	r25, r25
 268:	0c f4       	brge	.+2      	; 0x26c <Timer1_set_freq+0x30>
 26a:	03 96       	adiw	r24, 0x03	; 3
 26c:	95 95       	asr	r25
 26e:	87 95       	ror	r24
 270:	95 95       	asr	r25
 272:	87 95       	ror	r24
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	97 bd       	out	0x27, r25	; 39
 278:	86 bd       	out	0x26, r24	; 38
 27a:	08 95       	ret

0000027c <Servo_init>:
	}
}

void Servo_init(void)
{
		Timer1_init();
 27c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <Timer1_init>
		Timer1_set_freq(50);
 280:	82 e3       	ldi	r24, 0x32	; 50
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 1e 01 	call	0x23c	; 0x23c <Timer1_set_freq>
		Timer1_start();
 288:	0e 94 14 01 	call	0x228	; 0x228 <Timer1_start>
 28c:	08 95       	ret

0000028e <SPI_Init>:
	
	SPDR = data;			/* Write data to SPI data register */
	while(!(SPSR & (1<<SPIF)));	/* Wait till transmission complete */
	
	
}
 28e:	87 b3       	in	r24, 0x17	; 23
 290:	8f 7d       	andi	r24, 0xDF	; 223
 292:	87 bb       	out	0x17, r24	; 23
 294:	87 b3       	in	r24, 0x17	; 23
 296:	8f 77       	andi	r24, 0x7F	; 127
 298:	87 bb       	out	0x17, r24	; 23
 29a:	87 b3       	in	r24, 0x17	; 23
 29c:	8f 7e       	andi	r24, 0xEF	; 239
 29e:	87 bb       	out	0x17, r24	; 23
 2a0:	87 b3       	in	r24, 0x17	; 23
 2a2:	80 64       	ori	r24, 0x40	; 64
 2a4:	87 bb       	out	0x17, r24	; 23
 2a6:	86 b3       	in	r24, 0x16	; 22
 2a8:	8f 7e       	andi	r24, 0xEF	; 239
 2aa:	86 bb       	out	0x16, r24	; 22
 2ac:	8d b1       	in	r24, 0x0d	; 13
 2ae:	80 64       	ori	r24, 0x40	; 64
 2b0:	8d b9       	out	0x0d, r24	; 13
 2b2:	8d b1       	in	r24, 0x0d	; 13
 2b4:	8f 7e       	andi	r24, 0xEF	; 239
 2b6:	8d b9       	out	0x0d, r24	; 13
 2b8:	8d b1       	in	r24, 0x0d	; 13
 2ba:	81 60       	ori	r24, 0x01	; 1
 2bc:	8d b9       	out	0x0d, r24	; 13
 2be:	86 b3       	in	r24, 0x16	; 22
 2c0:	80 61       	ori	r24, 0x10	; 16
 2c2:	86 bb       	out	0x16, r24	; 22
 2c4:	08 95       	ret

000002c6 <SPI_Read>:


char SPI_Read()				/* SPI read data function */
{
	SPDR = 0xFF;
 2c6:	8f ef       	ldi	r24, 0xFF	; 255
 2c8:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	/* Wait till reception complete */
 2ca:	77 9b       	sbis	0x0e, 7	; 14
 2cc:	fe cf       	rjmp	.-4      	; 0x2ca <SPI_Read+0x4>
	return(SPDR);			/* Return received data */
 2ce:	8f b1       	in	r24, 0x0f	; 15
}
 2d0:	08 95       	ret

000002d2 <main>:


int main(void)
{
	//Initialization
	ADC_init();
 2d2:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_init>
	SPI_Init();
 2d6:	0e 94 47 01 	call	0x28e	; 0x28e <SPI_Init>
	Servo_init();
 2da:	0e 94 3e 01 	call	0x27c	; 0x27c <Servo_init>
	
	//adc2 input
	unsigned int x =0;
	clearbit(DDRA,2);
 2de:	8a b3       	in	r24, 0x1a	; 26
 2e0:	8b 7f       	andi	r24, 0xFB	; 251
 2e2:	8a bb       	out	0x1a, r24	; 26
	
	while(1)
	{
		
		//SPI Signal from Master
		signal=SPI_Read();
 2e4:	0e 94 63 01 	call	0x2c6	; 0x2c6 <SPI_Read>
 2e8:	c8 2f       	mov	r28, r24
		
		if(signal==1)
 2ea:	81 30       	cpi	r24, 0x01	; 1
 2ec:	21 f4       	brne	.+8      	; 0x2f6 <main+0x24>
		{Bulb_on(1);}
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 55 00 	call	0xaa	; 0xaa <Bulb_on>
		if(signal==2)
 2f6:	c2 30       	cpi	r28, 0x02	; 2
 2f8:	21 f4       	brne	.+8      	; 0x302 <main+0x30>
		{Bulb_off(1);}		
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 82 00 	call	0x104	; 0x104 <Bulb_off>
		if(signal==3)
 302:	c3 30       	cpi	r28, 0x03	; 3
 304:	21 f4       	brne	.+8      	; 0x30e <main+0x3c>
		{Bulb_on(2);}
 306:	82 e0       	ldi	r24, 0x02	; 2
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	0e 94 55 00 	call	0xaa	; 0xaa <Bulb_on>
		if(signal==4)
 30e:	c4 30       	cpi	r28, 0x04	; 4
 310:	21 f4       	brne	.+8      	; 0x31a <main+0x48>
		{Bulb_off(2);}
 312:	82 e0       	ldi	r24, 0x02	; 2
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0e 94 82 00 	call	0x104	; 0x104 <Bulb_off>
		if(signal==5)
 31a:	c5 30       	cpi	r28, 0x05	; 5
 31c:	21 f4       	brne	.+8      	; 0x326 <main+0x54>
		{Bulb_on(3);}
 31e:	83 e0       	ldi	r24, 0x03	; 3
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 55 00 	call	0xaa	; 0xaa <Bulb_on>
		if(signal==6)
 326:	c6 30       	cpi	r28, 0x06	; 6
 328:	21 f4       	brne	.+8      	; 0x332 <main+0x60>
		{Bulb_off(3);}
 32a:	83 e0       	ldi	r24, 0x03	; 3
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	0e 94 82 00 	call	0x104	; 0x104 <Bulb_off>
		if(signal==7)
 332:	c7 30       	cpi	r28, 0x07	; 7
 334:	21 f4       	brne	.+8      	; 0x33e <main+0x6c>
		{Bulb_on(4);}
 336:	84 e0       	ldi	r24, 0x04	; 4
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	0e 94 55 00 	call	0xaa	; 0xaa <Bulb_on>
		if(signal==8)
 33e:	c8 30       	cpi	r28, 0x08	; 8
 340:	21 f4       	brne	.+8      	; 0x34a <main+0x78>
		{Bulb_off(4);}
 342:	84 e0       	ldi	r24, 0x04	; 4
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	0e 94 82 00 	call	0x104	; 0x104 <Bulb_off>
		if(signal==9)
 34a:	c9 30       	cpi	r28, 0x09	; 9
 34c:	21 f4       	brne	.+8      	; 0x356 <main+0x84>
		{Bulb_on(5);}
 34e:	85 e0       	ldi	r24, 0x05	; 5
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0e 94 55 00 	call	0xaa	; 0xaa <Bulb_on>
		if(signal==0)
 356:	c1 11       	cpse	r28, r1
 358:	04 c0       	rjmp	.+8      	; 0x362 <main+0x90>
		{Bulb_off(5);}		
 35a:	85 e0       	ldi	r24, 0x05	; 5
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 82 00 	call	0x104	; 0x104 <Bulb_off>
		*/												
	
			
		if (AC_Flag==0)
		{			
	       x=ADC_read(2);
 362:	82 e0       	ldi	r24, 0x02	; 2
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 40 00 	call	0x80	; 0x80 <ADC_read>
	       if ((x*500/1023)>=28)
 36a:	24 ef       	ldi	r18, 0xF4	; 244
 36c:	31 e0       	ldi	r19, 0x01	; 1
 36e:	ac 01       	movw	r20, r24
 370:	42 9f       	mul	r20, r18
 372:	c0 01       	movw	r24, r0
 374:	43 9f       	mul	r20, r19
 376:	90 0d       	add	r25, r0
 378:	52 9f       	mul	r21, r18
 37a:	90 0d       	add	r25, r0
 37c:	11 24       	eor	r1, r1
 37e:	84 3e       	cpi	r24, 0xE4	; 228
 380:	9f 46       	sbci	r25, 0x6F	; 111
 382:	18 f0       	brcs	.+6      	; 0x38a <main+0xb8>
	       {
		     motor_start();
 384:	0e 94 af 00 	call	0x15e	; 0x15e <motor_start>
 388:	ad cf       	rjmp	.-166    	; 0x2e4 <main+0x12>
	       }
	       else
	       {
		     motor_stop();
 38a:	0e 94 b9 00 	call	0x172	; 0x172 <motor_stop>
 38e:	aa cf       	rjmp	.-172    	; 0x2e4 <main+0x12>

00000390 <__divmodhi4>:
 390:	97 fb       	bst	r25, 7
 392:	07 2e       	mov	r0, r23
 394:	16 f4       	brtc	.+4      	; 0x39a <__divmodhi4+0xa>
 396:	00 94       	com	r0
 398:	07 d0       	rcall	.+14     	; 0x3a8 <__divmodhi4_neg1>
 39a:	77 fd       	sbrc	r23, 7
 39c:	09 d0       	rcall	.+18     	; 0x3b0 <__divmodhi4_neg2>
 39e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <__udivmodhi4>
 3a2:	07 fc       	sbrc	r0, 7
 3a4:	05 d0       	rcall	.+10     	; 0x3b0 <__divmodhi4_neg2>
 3a6:	3e f4       	brtc	.+14     	; 0x3b6 <__divmodhi4_exit>

000003a8 <__divmodhi4_neg1>:
 3a8:	90 95       	com	r25
 3aa:	81 95       	neg	r24
 3ac:	9f 4f       	sbci	r25, 0xFF	; 255
 3ae:	08 95       	ret

000003b0 <__divmodhi4_neg2>:
 3b0:	70 95       	com	r23
 3b2:	61 95       	neg	r22
 3b4:	7f 4f       	sbci	r23, 0xFF	; 255

000003b6 <__divmodhi4_exit>:
 3b6:	08 95       	ret

000003b8 <__udivmodhi4>:
 3b8:	aa 1b       	sub	r26, r26
 3ba:	bb 1b       	sub	r27, r27
 3bc:	51 e1       	ldi	r21, 0x11	; 17
 3be:	07 c0       	rjmp	.+14     	; 0x3ce <__udivmodhi4_ep>

000003c0 <__udivmodhi4_loop>:
 3c0:	aa 1f       	adc	r26, r26
 3c2:	bb 1f       	adc	r27, r27
 3c4:	a6 17       	cp	r26, r22
 3c6:	b7 07       	cpc	r27, r23
 3c8:	10 f0       	brcs	.+4      	; 0x3ce <__udivmodhi4_ep>
 3ca:	a6 1b       	sub	r26, r22
 3cc:	b7 0b       	sbc	r27, r23

000003ce <__udivmodhi4_ep>:
 3ce:	88 1f       	adc	r24, r24
 3d0:	99 1f       	adc	r25, r25
 3d2:	5a 95       	dec	r21
 3d4:	a9 f7       	brne	.-22     	; 0x3c0 <__udivmodhi4_loop>
 3d6:	80 95       	com	r24
 3d8:	90 95       	com	r25
 3da:	bc 01       	movw	r22, r24
 3dc:	cd 01       	movw	r24, r26
 3de:	08 95       	ret

000003e0 <_exit>:
 3e0:	f8 94       	cli

000003e2 <__stop_program>:
 3e2:	ff cf       	rjmp	.-2      	; 0x3e2 <__stop_program>
