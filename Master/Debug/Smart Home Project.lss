
Smart Home Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e2  00800060  000007d2  00000846  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000928  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000958  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000001a0  00000000  00000000  00000994  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001b75  00000000  00000000  00000b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b84  00000000  00000000  000026a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000012fc  00000000  00000000  0000322d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000320  00000000  00000000  0000452c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000563  00000000  00000000  0000484c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f0b  00000000  00000000  00004daf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000130  00000000  00000000  00005cba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_1>
   8:	0c 94 41 00 	jmp	0x82	; 0x82 <__vector_2>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ed       	ldi	r30, 0xD2	; 210
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 34       	cpi	r26, 0x42	; 66
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 22 02 	call	0x444	; 0x444 <main>
  7a:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__vector_2>:



// int1 --> set bit 5
ISR(INT1_vect)  // interrupt service routine ISR handler --> vetor name ==>table--> address to the function --> process subroutine
{	// the code needed
  82:	1f 92       	push	r1
  84:	0f 92       	push	r0
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	0f 92       	push	r0
  8a:	11 24       	eor	r1, r1
  8c:	2f 93       	push	r18
  8e:	3f 93       	push	r19
  90:	4f 93       	push	r20
  92:	8f 93       	push	r24
  94:	9f 93       	push	r25
	int x;
	for(x=0;x<7;x++)
  96:	20 e0       	ldi	r18, 0x00	; 0
  98:	30 e0       	ldi	r19, 0x00	; 0
  9a:	0f c0       	rjmp	.+30     	; 0xba <__vector_2+0x38>
	{
		toggelbit(PORTA,5);
  9c:	9b b3       	in	r25, 0x1b	; 27
  9e:	80 e2       	ldi	r24, 0x20	; 32
  a0:	89 27       	eor	r24, r25
  a2:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	4f e9       	ldi	r20, 0x9F	; 159
  a6:	86 e8       	ldi	r24, 0x86	; 134
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	41 50       	subi	r20, 0x01	; 1
  ac:	80 40       	sbci	r24, 0x00	; 0
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <__vector_2+0x28>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <__vector_2+0x32>
  b4:	00 00       	nop

// int1 --> set bit 5
ISR(INT1_vect)  // interrupt service routine ISR handler --> vetor name ==>table--> address to the function --> process subroutine
{	// the code needed
	int x;
	for(x=0;x<7;x++)
  b6:	2f 5f       	subi	r18, 0xFF	; 255
  b8:	3f 4f       	sbci	r19, 0xFF	; 255
  ba:	27 30       	cpi	r18, 0x07	; 7
  bc:	31 05       	cpc	r19, r1
  be:	74 f3       	brlt	.-36     	; 0x9c <__vector_2+0x1a>
	{
		toggelbit(PORTA,5);
		_delay_ms(500);
	}
}
  c0:	9f 91       	pop	r25
  c2:	8f 91       	pop	r24
  c4:	4f 91       	pop	r20
  c6:	3f 91       	pop	r19
  c8:	2f 91       	pop	r18
  ca:	0f 90       	pop	r0
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	0f 90       	pop	r0
  d0:	1f 90       	pop	r1
  d2:	18 95       	reti

000000d4 <__vector_1>:

// int0 --> clear bit 5
ISR(INT0_vect)
{
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	8f 93       	push	r24
	clearbit(PORTA,5);
  e0:	8b b3       	in	r24, 0x1b	; 27
  e2:	8f 7d       	andi	r24, 0xDF	; 223
  e4:	8b bb       	out	0x1b, r24	; 27
  e6:	8f 91       	pop	r24
  e8:	0f 90       	pop	r0
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	0f 90       	pop	r0
  ee:	1f 90       	pop	r1
  f0:	18 95       	reti

000000f2 <keypad_init>:
	 // 4rows p0 p1 p2 p3    output power
	 //columns p4 p5 p6 p7   input  reading pin
	 
	 
	 ///////////////////////  output pins //////////////////////////////
	 setbit(keypad_out_dir,0);    //DDRA
  f2:	84 b3       	in	r24, 0x14	; 20
  f4:	81 60       	ori	r24, 0x01	; 1
  f6:	84 bb       	out	0x14, r24	; 20
	 setbit(keypad_out_dir,1);
  f8:	84 b3       	in	r24, 0x14	; 20
  fa:	82 60       	ori	r24, 0x02	; 2
  fc:	84 bb       	out	0x14, r24	; 20
	 setbit(keypad_out_dir,2);
  fe:	84 b3       	in	r24, 0x14	; 20
 100:	84 60       	ori	r24, 0x04	; 4
 102:	84 bb       	out	0x14, r24	; 20
	 setbit(keypad_out_dir,3);
 104:	84 b3       	in	r24, 0x14	; 20
 106:	88 60       	ori	r24, 0x08	; 8
 108:	84 bb       	out	0x14, r24	; 20
	 /////////////////// input pins /////////////////////////////////////
	 clearbit(keypad_in_dir,4);
 10a:	84 b3       	in	r24, 0x14	; 20
 10c:	8f 7e       	andi	r24, 0xEF	; 239
 10e:	84 bb       	out	0x14, r24	; 20
	 clearbit(keypad_in_dir,5);
 110:	84 b3       	in	r24, 0x14	; 20
 112:	8f 7d       	andi	r24, 0xDF	; 223
 114:	84 bb       	out	0x14, r24	; 20
	 clearbit(keypad_in_dir,6);
 116:	84 b3       	in	r24, 0x14	; 20
 118:	8f 7b       	andi	r24, 0xBF	; 191
 11a:	84 bb       	out	0x14, r24	; 20
	 clearbit(keypad_in_dir,7);
 11c:	84 b3       	in	r24, 0x14	; 20
 11e:	8f 77       	andi	r24, 0x7F	; 127
 120:	84 bb       	out	0x14, r24	; 20
	 ///////////////// internal pull up resistor for input pins /////////////////////////////
	 //input power
	 
	 setbit(keypad_in_port,4); // porta = 0000100  -- > pull up  input & port output
 122:	85 b3       	in	r24, 0x15	; 21
 124:	80 61       	ori	r24, 0x10	; 16
 126:	85 bb       	out	0x15, r24	; 21
	 setbit(keypad_in_port,5);
 128:	85 b3       	in	r24, 0x15	; 21
 12a:	80 62       	ori	r24, 0x20	; 32
 12c:	85 bb       	out	0x15, r24	; 21
	 setbit(keypad_in_port,6);
 12e:	85 b3       	in	r24, 0x15	; 21
 130:	80 64       	ori	r24, 0x40	; 64
 132:	85 bb       	out	0x15, r24	; 21
	 setbit(keypad_in_port,7);// noise
 134:	85 b3       	in	r24, 0x15	; 21
 136:	80 68       	ori	r24, 0x80	; 128
 138:	85 bb       	out	0x15, r24	; 21
 13a:	08 95       	ret

0000013c <switch_output>:

 void switch_output(int x)
 {
	 //power loop function for rows
	 
	 switch(x)
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	91 05       	cpc	r25, r1
 140:	b9 f0       	breq	.+46     	; 0x170 <switch_output+0x34>
 142:	1c f4       	brge	.+6      	; 0x14a <switch_output+0xe>
 144:	89 2b       	or	r24, r25
 146:	39 f0       	breq	.+14     	; 0x156 <switch_output+0x1a>
 148:	08 95       	ret
 14a:	82 30       	cpi	r24, 0x02	; 2
 14c:	91 05       	cpc	r25, r1
 14e:	e9 f0       	breq	.+58     	; 0x18a <switch_output+0x4e>
 150:	03 97       	sbiw	r24, 0x03	; 3
 152:	41 f1       	breq	.+80     	; 0x1a4 <switch_output+0x68>
 154:	08 95       	ret
	 {   // output r0 r1 r2 r3  high to low
		 case 0:
		 clearbit(keypad_out_port,0);  //r0 low
 156:	85 b3       	in	r24, 0x15	; 21
 158:	8e 7f       	andi	r24, 0xFE	; 254
 15a:	85 bb       	out	0x15, r24	; 21
		 setbit(keypad_out_port,1);
 15c:	85 b3       	in	r24, 0x15	; 21
 15e:	82 60       	ori	r24, 0x02	; 2
 160:	85 bb       	out	0x15, r24	; 21
		 setbit(keypad_out_port,2);
 162:	85 b3       	in	r24, 0x15	; 21
 164:	84 60       	ori	r24, 0x04	; 4
 166:	85 bb       	out	0x15, r24	; 21
		 setbit(keypad_out_port,3);
 168:	85 b3       	in	r24, 0x15	; 21
 16a:	88 60       	ori	r24, 0x08	; 8
 16c:	85 bb       	out	0x15, r24	; 21
		 break;
 16e:	08 95       	ret
		 case 1:
		 clearbit(keypad_out_port,1); // r1 low
 170:	85 b3       	in	r24, 0x15	; 21
 172:	8d 7f       	andi	r24, 0xFD	; 253
 174:	85 bb       	out	0x15, r24	; 21
		 setbit(keypad_out_port,0);
 176:	85 b3       	in	r24, 0x15	; 21
 178:	81 60       	ori	r24, 0x01	; 1
 17a:	85 bb       	out	0x15, r24	; 21
		 setbit(keypad_out_port,2);
 17c:	85 b3       	in	r24, 0x15	; 21
 17e:	84 60       	ori	r24, 0x04	; 4
 180:	85 bb       	out	0x15, r24	; 21
		 setbit(keypad_out_port,3);
 182:	85 b3       	in	r24, 0x15	; 21
 184:	88 60       	ori	r24, 0x08	; 8
 186:	85 bb       	out	0x15, r24	; 21
		 break;
 188:	08 95       	ret
		 case 2:
		 clearbit(keypad_out_port,2); // r2 low
 18a:	85 b3       	in	r24, 0x15	; 21
 18c:	8b 7f       	andi	r24, 0xFB	; 251
 18e:	85 bb       	out	0x15, r24	; 21
		 setbit(keypad_out_port,0);
 190:	85 b3       	in	r24, 0x15	; 21
 192:	81 60       	ori	r24, 0x01	; 1
 194:	85 bb       	out	0x15, r24	; 21
		 setbit(keypad_out_port,1);
 196:	85 b3       	in	r24, 0x15	; 21
 198:	82 60       	ori	r24, 0x02	; 2
 19a:	85 bb       	out	0x15, r24	; 21
		 setbit(keypad_out_port,3);
 19c:	85 b3       	in	r24, 0x15	; 21
 19e:	88 60       	ori	r24, 0x08	; 8
 1a0:	85 bb       	out	0x15, r24	; 21
		 break;
 1a2:	08 95       	ret
		 case 3:
		 clearbit(keypad_out_port,3); //r3 low
 1a4:	85 b3       	in	r24, 0x15	; 21
 1a6:	87 7f       	andi	r24, 0xF7	; 247
 1a8:	85 bb       	out	0x15, r24	; 21
		 setbit(keypad_out_port,0);
 1aa:	85 b3       	in	r24, 0x15	; 21
 1ac:	81 60       	ori	r24, 0x01	; 1
 1ae:	85 bb       	out	0x15, r24	; 21
		 setbit(keypad_out_port,1);
 1b0:	85 b3       	in	r24, 0x15	; 21
 1b2:	82 60       	ori	r24, 0x02	; 2
 1b4:	85 bb       	out	0x15, r24	; 21
		 setbit(keypad_out_port,2);
 1b6:	85 b3       	in	r24, 0x15	; 21
 1b8:	84 60       	ori	r24, 0x04	; 4
 1ba:	85 bb       	out	0x15, r24	; 21
 1bc:	08 95       	ret

000001be <get_key_value>:




 char get_key_value(void)
 {
 1be:	0f 93       	push	r16
 1c0:	1f 93       	push	r17
 1c2:	cf 93       	push	r28
	 char key = notpressed; // 255 
	 int i=0;
 1c4:	00 e0       	ldi	r16, 0x00	; 0
 1c6:	10 e0       	ldi	r17, 0x00	; 0



 char get_key_value(void)
 {
	 char key = notpressed; // 255 
 1c8:	cf ef       	ldi	r28, 0xFF	; 255
	 int i=0;
	 while(key == notpressed && i<3)// key = '1' break condition
 1ca:	6e c0       	rjmp	.+220    	; 0x2a8 <get_key_value+0xea>
	 {
		 i++;
 1cc:	0f 5f       	subi	r16, 0xFF	; 255
 1ce:	1f 4f       	sbci	r17, 0xFF	; 255
		 switch_output(0);
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 9e 00 	call	0x13c	; 0x13c <switch_output>
		 if (readbit(keypad_in_pin,4)==0)// pull up power--> low
 1d8:	9c 99       	sbic	0x13, 4	; 19
 1da:	04 c0       	rjmp	.+8      	; 0x1e4 <get_key_value+0x26>
		 {
			 key ='7';// char
			 while(readbit(keypad_in_pin,4)==0);// skip loop infinte
 1dc:	9c 9b       	sbis	0x13, 4	; 19
 1de:	fe cf       	rjmp	.-4      	; 0x1dc <get_key_value+0x1e>
	 {
		 i++;
		 switch_output(0);
		 if (readbit(keypad_in_pin,4)==0)// pull up power--> low
		 {
			 key ='7';// char
 1e0:	c7 e3       	ldi	r28, 0x37	; 55
 1e2:	11 c0       	rjmp	.+34     	; 0x206 <get_key_value+0x48>
			 while(readbit(keypad_in_pin,4)==0);// skip loop infinte
			 // there is no pressing anymore
		 }
		 else if (readbit(keypad_in_pin,5)==0)
 1e4:	9d 99       	sbic	0x13, 5	; 19
 1e6:	04 c0       	rjmp	.+8      	; 0x1f0 <get_key_value+0x32>
		 {
			 key ='8';
			 while(readbit(keypad_in_pin,5)==0);
 1e8:	9d 9b       	sbis	0x13, 5	; 19
 1ea:	fe cf       	rjmp	.-4      	; 0x1e8 <get_key_value+0x2a>
			 while(readbit(keypad_in_pin,4)==0);// skip loop infinte
			 // there is no pressing anymore
		 }
		 else if (readbit(keypad_in_pin,5)==0)
		 {
			 key ='8';
 1ec:	c8 e3       	ldi	r28, 0x38	; 56
 1ee:	0b c0       	rjmp	.+22     	; 0x206 <get_key_value+0x48>
			 while(readbit(keypad_in_pin,5)==0);
		 }
		 else if (readbit(keypad_in_pin,6)==0)
 1f0:	9e 99       	sbic	0x13, 6	; 19
 1f2:	04 c0       	rjmp	.+8      	; 0x1fc <get_key_value+0x3e>
		 {
			 key ='9';
			 while(readbit(keypad_in_pin,6)==0);
 1f4:	9e 9b       	sbis	0x13, 6	; 19
 1f6:	fe cf       	rjmp	.-4      	; 0x1f4 <get_key_value+0x36>
			 key ='8';
			 while(readbit(keypad_in_pin,5)==0);
		 }
		 else if (readbit(keypad_in_pin,6)==0)
		 {
			 key ='9';
 1f8:	c9 e3       	ldi	r28, 0x39	; 57
 1fa:	05 c0       	rjmp	.+10     	; 0x206 <get_key_value+0x48>
			 while(readbit(keypad_in_pin,6)==0);
		 }
		 else if (readbit(keypad_in_pin,7)==0)
 1fc:	9f 99       	sbic	0x13, 7	; 19
 1fe:	03 c0       	rjmp	.+6      	; 0x206 <get_key_value+0x48>
		 {
			 key ='/';
			 while(readbit(keypad_in_pin,7)==0);
 200:	9f 9b       	sbis	0x13, 7	; 19
 202:	fe cf       	rjmp	.-4      	; 0x200 <get_key_value+0x42>
			 key ='9';
			 while(readbit(keypad_in_pin,6)==0);
		 }
		 else if (readbit(keypad_in_pin,7)==0)
		 {
			 key ='/';
 204:	cf e2       	ldi	r28, 0x2F	; 47
			 while(readbit(keypad_in_pin,7)==0);
		 }
		 switch_output(1);
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 9e 00 	call	0x13c	; 0x13c <switch_output>
		 if (readbit(keypad_in_pin,4)==0)
 20e:	9c 99       	sbic	0x13, 4	; 19
 210:	04 c0       	rjmp	.+8      	; 0x21a <get_key_value+0x5c>
		 {
			 key ='4';
			 while(readbit(keypad_in_pin,4)==0);
 212:	9c 9b       	sbis	0x13, 4	; 19
 214:	fe cf       	rjmp	.-4      	; 0x212 <get_key_value+0x54>
			 while(readbit(keypad_in_pin,7)==0);
		 }
		 switch_output(1);
		 if (readbit(keypad_in_pin,4)==0)
		 {
			 key ='4';
 216:	c4 e3       	ldi	r28, 0x34	; 52
 218:	11 c0       	rjmp	.+34     	; 0x23c <get_key_value+0x7e>
			 while(readbit(keypad_in_pin,4)==0);
		 }
		 else if (readbit(keypad_in_pin,5)==0)
 21a:	9d 99       	sbic	0x13, 5	; 19
 21c:	04 c0       	rjmp	.+8      	; 0x226 <get_key_value+0x68>
		 {
			 key ='5';
			 while(readbit(keypad_in_pin,5)==0);
 21e:	9d 9b       	sbis	0x13, 5	; 19
 220:	fe cf       	rjmp	.-4      	; 0x21e <get_key_value+0x60>
			 key ='4';
			 while(readbit(keypad_in_pin,4)==0);
		 }
		 else if (readbit(keypad_in_pin,5)==0)
		 {
			 key ='5';
 222:	c5 e3       	ldi	r28, 0x35	; 53
 224:	0b c0       	rjmp	.+22     	; 0x23c <get_key_value+0x7e>
			 while(readbit(keypad_in_pin,5)==0);
		 }
		 else if (readbit(keypad_in_pin,6)==0)
 226:	9e 99       	sbic	0x13, 6	; 19
 228:	04 c0       	rjmp	.+8      	; 0x232 <get_key_value+0x74>
		 {
			 key ='6';
			 while(readbit(keypad_in_pin,6)==0);
 22a:	9e 9b       	sbis	0x13, 6	; 19
 22c:	fe cf       	rjmp	.-4      	; 0x22a <get_key_value+0x6c>
			 key ='5';
			 while(readbit(keypad_in_pin,5)==0);
		 }
		 else if (readbit(keypad_in_pin,6)==0)
		 {
			 key ='6';
 22e:	c6 e3       	ldi	r28, 0x36	; 54
 230:	05 c0       	rjmp	.+10     	; 0x23c <get_key_value+0x7e>
			 while(readbit(keypad_in_pin,6)==0);
		 }
		 else if (readbit(keypad_in_pin,7)==0)
 232:	9f 99       	sbic	0x13, 7	; 19
 234:	03 c0       	rjmp	.+6      	; 0x23c <get_key_value+0x7e>
		 {
			 key ='*';
			 while(readbit(keypad_in_pin,7)==0);
 236:	9f 9b       	sbis	0x13, 7	; 19
 238:	fe cf       	rjmp	.-4      	; 0x236 <get_key_value+0x78>
			 key ='6';
			 while(readbit(keypad_in_pin,6)==0);
		 }
		 else if (readbit(keypad_in_pin,7)==0)
		 {
			 key ='*';
 23a:	ca e2       	ldi	r28, 0x2A	; 42
			 while(readbit(keypad_in_pin,7)==0);
		 }
		 switch_output(2);
 23c:	82 e0       	ldi	r24, 0x02	; 2
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e 94 9e 00 	call	0x13c	; 0x13c <switch_output>
		 if (readbit(keypad_in_pin,4)==0)
 244:	9c 99       	sbic	0x13, 4	; 19
 246:	04 c0       	rjmp	.+8      	; 0x250 <get_key_value+0x92>
		 {
			 key ='1';
			 while(readbit(keypad_in_pin,4)==0);
 248:	9c 9b       	sbis	0x13, 4	; 19
 24a:	fe cf       	rjmp	.-4      	; 0x248 <get_key_value+0x8a>
			 while(readbit(keypad_in_pin,7)==0);
		 }
		 switch_output(2);
		 if (readbit(keypad_in_pin,4)==0)
		 {
			 key ='1';
 24c:	c1 e3       	ldi	r28, 0x31	; 49
 24e:	11 c0       	rjmp	.+34     	; 0x272 <get_key_value+0xb4>
			 while(readbit(keypad_in_pin,4)==0);
		 }
		 else if (readbit(keypad_in_pin,5)==0)
 250:	9d 99       	sbic	0x13, 5	; 19
 252:	04 c0       	rjmp	.+8      	; 0x25c <get_key_value+0x9e>
		 {
			 key ='2';
			 while(readbit(keypad_in_pin,5)==0);
 254:	9d 9b       	sbis	0x13, 5	; 19
 256:	fe cf       	rjmp	.-4      	; 0x254 <get_key_value+0x96>
			 key ='1';
			 while(readbit(keypad_in_pin,4)==0);
		 }
		 else if (readbit(keypad_in_pin,5)==0)
		 {
			 key ='2';
 258:	c2 e3       	ldi	r28, 0x32	; 50
 25a:	0b c0       	rjmp	.+22     	; 0x272 <get_key_value+0xb4>
			 while(readbit(keypad_in_pin,5)==0);
		 }
		 else if (readbit(keypad_in_pin,6)==0)
 25c:	9e 99       	sbic	0x13, 6	; 19
 25e:	04 c0       	rjmp	.+8      	; 0x268 <get_key_value+0xaa>
		 {
			 key ='3';
			 while(readbit(keypad_in_pin,6)==0);
 260:	9e 9b       	sbis	0x13, 6	; 19
 262:	fe cf       	rjmp	.-4      	; 0x260 <get_key_value+0xa2>
			 key ='2';
			 while(readbit(keypad_in_pin,5)==0);
		 }
		 else if (readbit(keypad_in_pin,6)==0)
		 {
			 key ='3';
 264:	c3 e3       	ldi	r28, 0x33	; 51
 266:	05 c0       	rjmp	.+10     	; 0x272 <get_key_value+0xb4>
			 while(readbit(keypad_in_pin,6)==0);
		 }
		 else if (readbit(keypad_in_pin,7)==0)
 268:	9f 99       	sbic	0x13, 7	; 19
 26a:	03 c0       	rjmp	.+6      	; 0x272 <get_key_value+0xb4>
		 {
			 key ='-';
			 while(readbit(keypad_in_pin,7)==0);
 26c:	9f 9b       	sbis	0x13, 7	; 19
 26e:	fe cf       	rjmp	.-4      	; 0x26c <get_key_value+0xae>
			 key ='3';
			 while(readbit(keypad_in_pin,6)==0);
		 }
		 else if (readbit(keypad_in_pin,7)==0)
		 {
			 key ='-';
 270:	cd e2       	ldi	r28, 0x2D	; 45
			 while(readbit(keypad_in_pin,7)==0);
		 }
		 switch_output(3);
 272:	83 e0       	ldi	r24, 0x03	; 3
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	0e 94 9e 00 	call	0x13c	; 0x13c <switch_output>
		 if (readbit(keypad_in_pin,4)==0)
 27a:	9c 99       	sbic	0x13, 4	; 19
 27c:	04 c0       	rjmp	.+8      	; 0x286 <get_key_value+0xc8>
		 {
			 key ='C';
			 while(readbit(keypad_in_pin,4)==0);
 27e:	9c 9b       	sbis	0x13, 4	; 19
 280:	fe cf       	rjmp	.-4      	; 0x27e <get_key_value+0xc0>
			 while(readbit(keypad_in_pin,7)==0);
		 }
		 switch_output(3);
		 if (readbit(keypad_in_pin,4)==0)
		 {
			 key ='C';
 282:	c3 e4       	ldi	r28, 0x43	; 67
 284:	11 c0       	rjmp	.+34     	; 0x2a8 <get_key_value+0xea>
			 while(readbit(keypad_in_pin,4)==0);
		 }
		 else if (readbit(keypad_in_pin,5)==0)
 286:	9d 99       	sbic	0x13, 5	; 19
 288:	04 c0       	rjmp	.+8      	; 0x292 <get_key_value+0xd4>
		 {
			 key ='0';
			 while(readbit(keypad_in_pin,5)==0);
 28a:	9d 9b       	sbis	0x13, 5	; 19
 28c:	fe cf       	rjmp	.-4      	; 0x28a <get_key_value+0xcc>
			 key ='C';
			 while(readbit(keypad_in_pin,4)==0);
		 }
		 else if (readbit(keypad_in_pin,5)==0)
		 {
			 key ='0';
 28e:	c0 e3       	ldi	r28, 0x30	; 48
 290:	0b c0       	rjmp	.+22     	; 0x2a8 <get_key_value+0xea>
			 while(readbit(keypad_in_pin,5)==0);
		 }
		 else if (readbit(keypad_in_pin,6)==0)
 292:	9e 99       	sbic	0x13, 6	; 19
 294:	04 c0       	rjmp	.+8      	; 0x29e <get_key_value+0xe0>
		 {
			 key ='=';
			 while(readbit(keypad_in_pin,6)==0);
 296:	9e 9b       	sbis	0x13, 6	; 19
 298:	fe cf       	rjmp	.-4      	; 0x296 <get_key_value+0xd8>
			 key ='0';
			 while(readbit(keypad_in_pin,5)==0);
		 }
		 else if (readbit(keypad_in_pin,6)==0)
		 {
			 key ='=';
 29a:	cd e3       	ldi	r28, 0x3D	; 61
 29c:	05 c0       	rjmp	.+10     	; 0x2a8 <get_key_value+0xea>
			 while(readbit(keypad_in_pin,6)==0);
		 }
		 else if (readbit(keypad_in_pin,7)==0)
 29e:	9f 99       	sbic	0x13, 7	; 19
 2a0:	03 c0       	rjmp	.+6      	; 0x2a8 <get_key_value+0xea>
		 {
			 key ='+';
			 while(readbit(keypad_in_pin,7)==0);
 2a2:	9f 9b       	sbis	0x13, 7	; 19
 2a4:	fe cf       	rjmp	.-4      	; 0x2a2 <get_key_value+0xe4>
			 key ='=';
			 while(readbit(keypad_in_pin,6)==0);
		 }
		 else if (readbit(keypad_in_pin,7)==0)
		 {
			 key ='+';
 2a6:	cb e2       	ldi	r28, 0x2B	; 43

 char get_key_value(void)
 {
	 char key = notpressed; // 255 
	 int i=0;
	 while(key == notpressed && i<3)// key = '1' break condition
 2a8:	cf 3f       	cpi	r28, 0xFF	; 255
 2aa:	21 f4       	brne	.+8      	; 0x2b4 <get_key_value+0xf6>
 2ac:	03 30       	cpi	r16, 0x03	; 3
 2ae:	11 05       	cpc	r17, r1
 2b0:	0c f4       	brge	.+2      	; 0x2b4 <get_key_value+0xf6>
 2b2:	8c cf       	rjmp	.-232    	; 0x1cc <get_key_value+0xe>
			 while(readbit(keypad_in_pin,7)==0);
		 }
	 }
	 return key;
	 
 2b4:	8c 2f       	mov	r24, r28
 2b6:	cf 91       	pop	r28
 2b8:	1f 91       	pop	r17
 2ba:	0f 91       	pop	r16
 2bc:	08 95       	ret

000002be <LCD_send_data_4bit>:
void LCD_Next_Line(void)
{LCD_send_command_4bit(0xC0);}
void LCD_Shift_Right(void)
{LCD_send_command_4bit(0x14);}
void LCD_Shift_Left(void)
{LCD_send_command_4bit(0x10);}
 2be:	9b b3       	in	r25, 0x1b	; 27
 2c0:	9f 70       	andi	r25, 0x0F	; 15
 2c2:	28 2f       	mov	r18, r24
 2c4:	20 7f       	andi	r18, 0xF0	; 240
 2c6:	92 2b       	or	r25, r18
 2c8:	9b bb       	out	0x1b, r25	; 27
 2ca:	98 b3       	in	r25, 0x18	; 24
 2cc:	92 60       	ori	r25, 0x02	; 2
 2ce:	98 bb       	out	0x18, r25	; 24
 2d0:	98 b3       	in	r25, 0x18	; 24
 2d2:	9b 7f       	andi	r25, 0xFB	; 251
 2d4:	98 bb       	out	0x18, r25	; 24
 2d6:	98 b3       	in	r25, 0x18	; 24
 2d8:	98 60       	ori	r25, 0x08	; 8
 2da:	98 bb       	out	0x18, r25	; 24
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <LCD_send_data_4bit+0x20>
 2de:	00 00       	nop
 2e0:	98 b3       	in	r25, 0x18	; 24
 2e2:	97 7f       	andi	r25, 0xF7	; 247
 2e4:	98 bb       	out	0x18, r25	; 24
 2e6:	32 e4       	ldi	r19, 0x42	; 66
 2e8:	3a 95       	dec	r19
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <LCD_send_data_4bit+0x2a>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <LCD_send_data_4bit+0x30>
 2ee:	2b b3       	in	r18, 0x1b	; 27
 2f0:	30 e1       	ldi	r19, 0x10	; 16
 2f2:	83 9f       	mul	r24, r19
 2f4:	c0 01       	movw	r24, r0
 2f6:	11 24       	eor	r1, r1
 2f8:	92 2f       	mov	r25, r18
 2fa:	9f 70       	andi	r25, 0x0F	; 15
 2fc:	89 2b       	or	r24, r25
 2fe:	8b bb       	out	0x1b, r24	; 27
 300:	88 b3       	in	r24, 0x18	; 24
 302:	88 60       	ori	r24, 0x08	; 8
 304:	88 bb       	out	0x18, r24	; 24
 306:	00 c0       	rjmp	.+0      	; 0x308 <LCD_send_data_4bit+0x4a>
 308:	00 00       	nop
 30a:	88 b3       	in	r24, 0x18	; 24
 30c:	87 7f       	andi	r24, 0xF7	; 247
 30e:	88 bb       	out	0x18, r24	; 24
 310:	8d ee       	ldi	r24, 0xED	; 237
 312:	92 e0       	ldi	r25, 0x02	; 2
 314:	01 97       	sbiw	r24, 0x01	; 1
 316:	f1 f7       	brne	.-4      	; 0x314 <LCD_send_data_4bit+0x56>
 318:	00 c0       	rjmp	.+0      	; 0x31a <LCD_send_data_4bit+0x5c>
 31a:	00 00       	nop
 31c:	08 95       	ret

0000031e <LCD_send_command_4bit>:
 31e:	9b b3       	in	r25, 0x1b	; 27
 320:	9f 70       	andi	r25, 0x0F	; 15
 322:	28 2f       	mov	r18, r24
 324:	20 7f       	andi	r18, 0xF0	; 240
 326:	92 2b       	or	r25, r18
 328:	9b bb       	out	0x1b, r25	; 27
 32a:	98 b3       	in	r25, 0x18	; 24
 32c:	9d 7f       	andi	r25, 0xFD	; 253
 32e:	98 bb       	out	0x18, r25	; 24
 330:	98 b3       	in	r25, 0x18	; 24
 332:	9b 7f       	andi	r25, 0xFB	; 251
 334:	98 bb       	out	0x18, r25	; 24
 336:	98 b3       	in	r25, 0x18	; 24
 338:	98 60       	ori	r25, 0x08	; 8
 33a:	98 bb       	out	0x18, r25	; 24
 33c:	00 c0       	rjmp	.+0      	; 0x33e <LCD_send_command_4bit+0x20>
 33e:	00 00       	nop
 340:	98 b3       	in	r25, 0x18	; 24
 342:	97 7f       	andi	r25, 0xF7	; 247
 344:	98 bb       	out	0x18, r25	; 24
 346:	32 e4       	ldi	r19, 0x42	; 66
 348:	3a 95       	dec	r19
 34a:	f1 f7       	brne	.-4      	; 0x348 <LCD_send_command_4bit+0x2a>
 34c:	00 c0       	rjmp	.+0      	; 0x34e <LCD_send_command_4bit+0x30>
 34e:	2b b3       	in	r18, 0x1b	; 27
 350:	30 e1       	ldi	r19, 0x10	; 16
 352:	83 9f       	mul	r24, r19
 354:	c0 01       	movw	r24, r0
 356:	11 24       	eor	r1, r1
 358:	92 2f       	mov	r25, r18
 35a:	9f 70       	andi	r25, 0x0F	; 15
 35c:	89 2b       	or	r24, r25
 35e:	8b bb       	out	0x1b, r24	; 27
 360:	88 b3       	in	r24, 0x18	; 24
 362:	88 60       	ori	r24, 0x08	; 8
 364:	88 bb       	out	0x18, r24	; 24
 366:	00 c0       	rjmp	.+0      	; 0x368 <LCD_send_command_4bit+0x4a>
 368:	00 00       	nop
 36a:	88 b3       	in	r24, 0x18	; 24
 36c:	87 7f       	andi	r24, 0xF7	; 247
 36e:	88 bb       	out	0x18, r24	; 24
 370:	8d ee       	ldi	r24, 0xED	; 237
 372:	92 e0       	ldi	r25, 0x02	; 2
 374:	01 97       	sbiw	r24, 0x01	; 1
 376:	f1 f7       	brne	.-4      	; 0x374 <LCD_send_command_4bit+0x56>
 378:	00 c0       	rjmp	.+0      	; 0x37a <LCD_send_command_4bit+0x5c>
 37a:	00 00       	nop
 37c:	08 95       	ret

0000037e <LCD_Next_Line>:
 37e:	80 ec       	ldi	r24, 0xC0	; 192
 380:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_send_command_4bit>
 384:	08 95       	ret

00000386 <LCD_Clear>:
void LCD_Clear(void)
{LCD_send_command_4bit(0x01);}
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_send_command_4bit>
 38c:	08 95       	ret

0000038e <LCD_Home>:
void LCD_Home(void)
{LCD_send_command_4bit(0x02);}
 38e:	82 e0       	ldi	r24, 0x02	; 2
 390:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_send_command_4bit>
 394:	08 95       	ret

00000396 <LCD_INIT_4bit>:


void LCD_INIT_4bit(void)
{
	LCD_DATA_DIR|= 0xf0;
 396:	8a b3       	in	r24, 0x1a	; 26
 398:	80 6f       	ori	r24, 0xF0	; 240
 39a:	8a bb       	out	0x1a, r24	; 26
	setbit(LCD_control_DIR,EN);
 39c:	87 b3       	in	r24, 0x17	; 23
 39e:	88 60       	ori	r24, 0x08	; 8
 3a0:	87 bb       	out	0x17, r24	; 23
	setbit(LCD_control_DIR,RS);
 3a2:	87 b3       	in	r24, 0x17	; 23
 3a4:	82 60       	ori	r24, 0x02	; 2
 3a6:	87 bb       	out	0x17, r24	; 23
	setbit(LCD_control_DIR,RW);
 3a8:	87 b3       	in	r24, 0x17	; 23
 3aa:	84 60       	ori	r24, 0x04	; 4
 3ac:	87 bb       	out	0x17, r24	; 23
	LCD_send_command_4bit(0x02);// return home
 3ae:	82 e0       	ldi	r24, 0x02	; 2
 3b0:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_send_command_4bit>
	LCD_send_command_4bit(0x28);// 2 line  and 4 bit mode
 3b4:	88 e2       	ldi	r24, 0x28	; 40
 3b6:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_send_command_4bit>
	LCD_send_command_4bit(0x0c);// display on
 3ba:	8c e0       	ldi	r24, 0x0C	; 12
 3bc:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_send_command_4bit>
	LCD_send_command_4bit(0x06);// auto increment
 3c0:	86 e0       	ldi	r24, 0x06	; 6
 3c2:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_send_command_4bit>
	LCD_send_command_4bit(0x01);// clear screen
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_send_command_4bit>
 3cc:	87 e8       	ldi	r24, 0x87	; 135
 3ce:	93 e1       	ldi	r25, 0x13	; 19
 3d0:	01 97       	sbiw	r24, 0x01	; 1
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <LCD_INIT_4bit+0x3a>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <LCD_INIT_4bit+0x40>
 3d6:	00 00       	nop
 3d8:	08 95       	ret

000003da <LCD_send_string_4bit>:
	_delay_ms(20);
	
	
}
void LCD_send_string_4bit( char* str)
{
 3da:	0f 93       	push	r16
 3dc:	1f 93       	push	r17
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	8c 01       	movw	r16, r24
	int count =0;
 3e4:	c0 e0       	ldi	r28, 0x00	; 0
 3e6:	d0 e0       	ldi	r29, 0x00	; 0
	while(str[count]!=0)
 3e8:	03 c0       	rjmp	.+6      	; 0x3f0 <LCD_send_string_4bit+0x16>
	{
		LCD_send_data_4bit(str[count]);
 3ea:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_send_data_4bit>
		count++;
 3ee:	21 96       	adiw	r28, 0x01	; 1
	
}
void LCD_send_string_4bit( char* str)
{
	int count =0;
	while(str[count]!=0)
 3f0:	f8 01       	movw	r30, r16
 3f2:	ec 0f       	add	r30, r28
 3f4:	fd 1f       	adc	r31, r29
 3f6:	80 81       	ld	r24, Z
 3f8:	81 11       	cpse	r24, r1
 3fa:	f7 cf       	rjmp	.-18     	; 0x3ea <LCD_send_string_4bit+0x10>
	{
		LCD_send_data_4bit(str[count]);
		count++;
	}
}
 3fc:	df 91       	pop	r29
 3fe:	cf 91       	pop	r28
 400:	1f 91       	pop	r17
 402:	0f 91       	pop	r16
 404:	08 95       	ret

00000406 <SPI_Init>:
//1-init
//2-function send
//3-function recive
void SPI_Init()					/* SPI Initialize function */
{
	DDRB |= (1<<MOSI)|(1<<SCK)|(1<<SS);	//Make MOSI, SCK, SS as Output pin
 406:	87 b3       	in	r24, 0x17	; 23
 408:	80 6b       	ori	r24, 0xB0	; 176
 40a:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<MISO);			// Make MISO pin as input pin
 40c:	87 b3       	in	r24, 0x17	; 23
 40e:	8f 7b       	andi	r24, 0xBF	; 191
 410:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1<<SS);			// Make high on SS pin
 412:	88 b3       	in	r24, 0x18	; 24
 414:	80 61       	ori	r24, 0x10	; 16
 416:	88 bb       	out	0x18, r24	; 24
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);	// Enable SPI in master mode with Fosc/16
 418:	81 e5       	ldi	r24, 0x51	; 81
 41a:	8d b9       	out	0x0d, r24	; 13
	SPSR &= ~(1<<SPI2X);			// Disable speed doubler
 41c:	8e b1       	in	r24, 0x0e	; 14
 41e:	8e 7f       	andi	r24, 0xFE	; 254
 420:	8e b9       	out	0x0e, r24	; 14
	PORTB &=~(1<<SS);  //Deselect
 422:	88 b3       	in	r24, 0x18	; 24
 424:	8f 7e       	andi	r24, 0xEF	; 239
 426:	88 bb       	out	0x18, r24	; 24
 428:	08 95       	ret

0000042a <SPI_Write>:


void SPI_Write(unsigned char data)		/* SPI write data function */
{
	
	SPDR = data;			/* Write data to SPI data register */
 42a:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	/* Wait till transmission complete */
 42c:	77 9b       	sbis	0x0e, 7	; 14
 42e:	fe cf       	rjmp	.-4      	; 0x42c <SPI_Write+0x2>
	
	
}
 430:	08 95       	ret

00000432 <UART_INIT>:
// baude rate : speed of sending data    bit per second bps
// table of speed of baude rate: 3Mbps ~ 4800 bps (9600 bps) 9600 )
// 
void UART_INIT(unsigned int baud)//103  479 10101010101
{// 8 bit data 1 stop bit 
	UCSRB |= (1 << RXEN) | (1 << TXEN);	// Enable UART transmitter and receiver
 432:	2a b1       	in	r18, 0x0a	; 10
 434:	28 61       	ori	r18, 0x18	; 24
 436:	2a b9       	out	0x0a, r18	; 10
	UCSRC |= (1 << URSEL)| (1 << UCSZ0) | (1 << UCSZ1);	//8 bit data and 1 stop bit
 438:	20 b5       	in	r18, 0x20	; 32
 43a:	26 68       	ori	r18, 0x86	; 134
 43c:	20 bd       	out	0x20, r18	; 32
	UBRRL = baud;//lower
 43e:	89 b9       	out	0x09, r24	; 9
	UBRRH = (baud >> 8);//higher 
 440:	90 bd       	out	0x20, r25	; 32
 442:	08 95       	ret

00000444 <main>:
 444:	2f ef       	ldi	r18, 0xFF	; 255
 446:	89 e6       	ldi	r24, 0x69	; 105
 448:	98 e1       	ldi	r25, 0x18	; 24
 44a:	21 50       	subi	r18, 0x01	; 1
 44c:	80 40       	sbci	r24, 0x00	; 0
 44e:	90 40       	sbci	r25, 0x00	; 0
 450:	e1 f7       	brne	.-8      	; 0x44a <main+0x6>
 452:	00 c0       	rjmp	.+0      	; 0x454 <main+0x10>
 454:	00 00       	nop


int main(void)
{
	_delay_ms(500);
	LCD_INIT_4bit();    // init lcd
 456:	0e 94 cb 01 	call	0x396	; 0x396 <LCD_INIT_4bit>
	keypad_init();      // define key pad   //1//
 45a:	0e 94 79 00 	call	0xf2	; 0xf2 <keypad_init>
	UART_INIT(103);
 45e:	87 e6       	ldi	r24, 0x67	; 103
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	0e 94 19 02 	call	0x432	; 0x432 <UART_INIT>
	SPI_Init();
 466:	0e 94 03 02 	call	0x406	; 0x406 <SPI_Init>

	LCD_send_string_4bit("Smart Home Proj.");
 46a:	80 e6       	ldi	r24, 0x60	; 96
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_send_string_4bit>
 472:	2f ef       	ldi	r18, 0xFF	; 255
 474:	83 ed       	ldi	r24, 0xD3	; 211
 476:	90 e3       	ldi	r25, 0x30	; 48
 478:	21 50       	subi	r18, 0x01	; 1
 47a:	80 40       	sbci	r24, 0x00	; 0
 47c:	90 40       	sbci	r25, 0x00	; 0
 47e:	e1 f7       	brne	.-8      	; 0x478 <main+0x34>
 480:	00 c0       	rjmp	.+0      	; 0x482 <main+0x3e>
 482:	00 00       	nop
	_delay_ms(1000);
	LCD_Clear();
 484:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_Clear>
	LCD_Home();
 488:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_Home>
	menu();	
 48c:	0e 94 63 02 	call	0x4c6	; 0x4c6 <menu>
 490:	80 e0       	ldi	r24, 0x00	; 0
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	08 95       	ret

00000496 <get_answer>:
void Servo_close(void);
void Buzzer(void);


unsigned char get_answer(void)
{
 496:	cf 93       	push	r28
			unsigned char k=0xFF;
 498:	cf ef       	ldi	r28, 0xFF	; 255
			while(k==notpressed)
 49a:	10 c0       	rjmp	.+32     	; 0x4bc <get_answer+0x26>
			{
			k=get_key_value();
 49c:	0e 94 df 00 	call	0x1be	; 0x1be <get_key_value>
 4a0:	c8 2f       	mov	r28, r24
			if(k!=notpressed)
 4a2:	8f 3f       	cpi	r24, 0xFF	; 255
 4a4:	11 f0       	breq	.+4      	; 0x4aa <get_answer+0x14>
			LCD_send_data_4bit(k);
 4a6:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_send_data_4bit>
			SPI_Write(0XFF);
 4aa:	8f ef       	ldi	r24, 0xFF	; 255
 4ac:	0e 94 15 02 	call	0x42a	; 0x42a <SPI_Write>
 4b0:	83 ed       	ldi	r24, 0xD3	; 211
 4b2:	90 e3       	ldi	r25, 0x30	; 48
 4b4:	01 97       	sbiw	r24, 0x01	; 1
 4b6:	f1 f7       	brne	.-4      	; 0x4b4 <get_answer+0x1e>
 4b8:	00 c0       	rjmp	.+0      	; 0x4ba <get_answer+0x24>
 4ba:	00 00       	nop


unsigned char get_answer(void)
{
			unsigned char k=0xFF;
			while(k==notpressed)
 4bc:	cf 3f       	cpi	r28, 0xFF	; 255
 4be:	71 f3       	breq	.-36     	; 0x49c <get_answer+0x6>
			LCD_send_data_4bit(k);
			SPI_Write(0XFF);
			_delay_ms(50);
			}
			return k;
}
 4c0:	8c 2f       	mov	r24, r28
 4c2:	cf 91       	pop	r28
 4c4:	08 95       	ret

000004c6 <menu>:

void menu(void)
{	
	int Menu_flag=0;
 4c6:	c0 e0       	ldi	r28, 0x00	; 0
 4c8:	d0 e0       	ldi	r29, 0x00	; 0
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <menu+0xa>
		LCD_send_string_4bit("Temp:4");
		LCD_Next_Line();
		LCD_send_string_4bit("Door:5 Ret:0");
		choice=get_answer();
		if(choice=='0')
		{Menu_flag=0;}	
 4cc:	c0 e0       	ldi	r28, 0x00	; 0
 4ce:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char choice=0xFF;
	
	while(1)
	{
	
	if(Menu_flag==0)
 4d0:	20 97       	sbiw	r28, 0x00	; 0
 4d2:	21 f5       	brne	.+72     	; 0x51c <menu+0x56>
	{
		LCD_Clear();
 4d4:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_Clear>
		LCD_Home();
 4d8:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_Home>
		LCD_send_string_4bit("User Mode  R:1");
 4dc:	81 e7       	ldi	r24, 0x71	; 113
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_send_string_4bit>
		LCD_Next_Line();
 4e4:	0e 94 bf 01 	call	0x37e	; 0x37e <LCD_Next_Line>
		LCD_send_string_4bit("Dim:2 AC:3 ~:4");
 4e8:	80 e8       	ldi	r24, 0x80	; 128
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_send_string_4bit>
		choice=get_answer();
 4f0:	0e 94 4b 02 	call	0x496	; 0x496 <get_answer>
		
		//Main Menu
		/////////////////////////
		if(choice=='1')
 4f4:	81 33       	cpi	r24, 0x31	; 49
 4f6:	39 f0       	breq	.+14     	; 0x506 <menu+0x40>
		{
		Menu_flag=1;	
		}
		else if(choice=='2')
 4f8:	82 33       	cpi	r24, 0x32	; 50
 4fa:	41 f0       	breq	.+16     	; 0x50c <menu+0x46>
		{
		Menu_flag=2;	
		}		
		else if(choice=='3')
 4fc:	83 33       	cpi	r24, 0x33	; 51
 4fe:	49 f0       	breq	.+18     	; 0x512 <menu+0x4c>
		{
		Menu_flag=3;	
		}
		else if(choice=='4')
 500:	84 33       	cpi	r24, 0x34	; 52
 502:	61 f4       	brne	.+24     	; 0x51c <menu+0x56>
 504:	09 c0       	rjmp	.+18     	; 0x518 <menu+0x52>
		
		//Main Menu
		/////////////////////////
		if(choice=='1')
		{
		Menu_flag=1;	
 506:	c1 e0       	ldi	r28, 0x01	; 1
 508:	d0 e0       	ldi	r29, 0x00	; 0
 50a:	08 c0       	rjmp	.+16     	; 0x51c <menu+0x56>
		}
		else if(choice=='2')
		{
		Menu_flag=2;	
 50c:	c2 e0       	ldi	r28, 0x02	; 2
 50e:	d0 e0       	ldi	r29, 0x00	; 0
 510:	05 c0       	rjmp	.+10     	; 0x51c <menu+0x56>
		}		
		else if(choice=='3')
		{
		Menu_flag=3;	
 512:	c3 e0       	ldi	r28, 0x03	; 3
 514:	d0 e0       	ldi	r29, 0x00	; 0
 516:	02 c0       	rjmp	.+4      	; 0x51c <menu+0x56>
		}
		else if(choice=='4')
		{
		Menu_flag=4;	
 518:	c4 e0       	ldi	r28, 0x04	; 4
 51a:	d0 e0       	ldi	r29, 0x00	; 0
		}	
	}//0
	////////////////////////////
	
	if(Menu_flag==1)
 51c:	c1 30       	cpi	r28, 0x01	; 1
 51e:	d1 05       	cpc	r29, r1
 520:	09 f0       	breq	.+2      	; 0x524 <menu+0x5e>
 522:	6f c0       	rjmp	.+222    	; 0x602 <menu+0x13c>
	{
	LCD_Clear();
 524:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_Clear>
	LCD_Home();
 528:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_Home>
	LCD_send_string_4bit("R1:1 R2:2 R3:3");
 52c:	8f e8       	ldi	r24, 0x8F	; 143
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_send_string_4bit>
	LCD_Next_Line();
 534:	0e 94 bf 01 	call	0x37e	; 0x37e <LCD_Next_Line>
	LCD_send_string_4bit("R4:4 R5:5 Ret.:0");		
 538:	8e e9       	ldi	r24, 0x9E	; 158
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_send_string_4bit>
	choice=get_answer();
 540:	0e 94 4b 02 	call	0x496	; 0x496 <get_answer>
 544:	18 2f       	mov	r17, r24
	//Bulbs
	////////////////////////////
	if(choice=='1')
 546:	81 33       	cpi	r24, 0x31	; 49
 548:	81 f4       	brne	.+32     	; 0x56a <menu+0xa4>
	{
	LCD_Clear();
 54a:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_Clear>
	LCD_Home();	
 54e:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_Home>
	LCD_send_string_4bit("Room1 Lights");
 552:	8f ea       	ldi	r24, 0xAF	; 175
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_send_string_4bit>
	LCD_Next_Line();
 55a:	0e 94 bf 01 	call	0x37e	; 0x37e <LCD_Next_Line>
	LCD_send_string_4bit("On:1 Off:2 Ret:0");
 55e:	8c eb       	ldi	r24, 0xBC	; 188
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_send_string_4bit>
	Menu_flag=5;
 566:	c5 e0       	ldi	r28, 0x05	; 5
 568:	d0 e0       	ldi	r29, 0x00	; 0
	}
	if(choice=='2')
 56a:	12 33       	cpi	r17, 0x32	; 50
 56c:	81 f4       	brne	.+32     	; 0x58e <menu+0xc8>
	{
		LCD_Clear();
 56e:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_Clear>
		LCD_Home();
 572:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_Home>
		LCD_send_string_4bit("Room2 Lights");
 576:	8d ec       	ldi	r24, 0xCD	; 205
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_send_string_4bit>
		LCD_Next_Line();
 57e:	0e 94 bf 01 	call	0x37e	; 0x37e <LCD_Next_Line>
		LCD_send_string_4bit("On:1 Off:2 Ret:0");
 582:	8c eb       	ldi	r24, 0xBC	; 188
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_send_string_4bit>
		Menu_flag=6;
 58a:	c6 e0       	ldi	r28, 0x06	; 6
 58c:	d0 e0       	ldi	r29, 0x00	; 0
	}	
	if(choice=='3')
 58e:	13 33       	cpi	r17, 0x33	; 51
 590:	81 f4       	brne	.+32     	; 0x5b2 <menu+0xec>
	{
		LCD_Clear();
 592:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_Clear>
		LCD_Home();
 596:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_Home>
		LCD_send_string_4bit("Room3 Lights");
 59a:	8a ed       	ldi	r24, 0xDA	; 218
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_send_string_4bit>
		LCD_Next_Line();
 5a2:	0e 94 bf 01 	call	0x37e	; 0x37e <LCD_Next_Line>
		LCD_send_string_4bit("On:1 Off:2 Ret:0");
 5a6:	8c eb       	ldi	r24, 0xBC	; 188
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_send_string_4bit>
		Menu_flag=7;
 5ae:	c7 e0       	ldi	r28, 0x07	; 7
 5b0:	d0 e0       	ldi	r29, 0x00	; 0
	}
	if(choice=='4')
 5b2:	14 33       	cpi	r17, 0x34	; 52
 5b4:	81 f4       	brne	.+32     	; 0x5d6 <menu+0x110>
	{
		LCD_Clear();
 5b6:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_Clear>
		LCD_Home();
 5ba:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_Home>
		LCD_send_string_4bit("Room4 Lights");
 5be:	87 ee       	ldi	r24, 0xE7	; 231
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_send_string_4bit>
		LCD_Next_Line();
 5c6:	0e 94 bf 01 	call	0x37e	; 0x37e <LCD_Next_Line>
		LCD_send_string_4bit("On:1 Off:2 Ret:0");
 5ca:	8c eb       	ldi	r24, 0xBC	; 188
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_send_string_4bit>
		Menu_flag=8;
 5d2:	c8 e0       	ldi	r28, 0x08	; 8
 5d4:	d0 e0       	ldi	r29, 0x00	; 0
	}
	if(choice=='5')
 5d6:	15 33       	cpi	r17, 0x35	; 53
 5d8:	81 f4       	brne	.+32     	; 0x5fa <menu+0x134>
	{
		LCD_Clear();
 5da:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_Clear>
		LCD_Home();
 5de:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_Home>
		LCD_send_string_4bit("Room5 Lights");
 5e2:	84 ef       	ldi	r24, 0xF4	; 244
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_send_string_4bit>
		LCD_Next_Line();
 5ea:	0e 94 bf 01 	call	0x37e	; 0x37e <LCD_Next_Line>
		LCD_send_string_4bit("On:1 Off:2 Ret:0");
 5ee:	8c eb       	ldi	r24, 0xBC	; 188
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_send_string_4bit>
		Menu_flag=9;
 5f6:	c9 e0       	ldi	r28, 0x09	; 9
 5f8:	d0 e0       	ldi	r29, 0x00	; 0
	}			
	if(choice=='0')
 5fa:	10 33       	cpi	r17, 0x30	; 48
 5fc:	11 f4       	brne	.+4      	; 0x602 <menu+0x13c>
	{
		Menu_flag=0;
 5fe:	c0 e0       	ldi	r28, 0x00	; 0
 600:	d0 e0       	ldi	r29, 0x00	; 0
	}
		
	}//1
	if(Menu_flag==5)
 602:	c5 30       	cpi	r28, 0x05	; 5
 604:	d1 05       	cpc	r29, r1
 606:	e9 f4       	brne	.+58     	; 0x642 <menu+0x17c>
	{
		choice=get_answer();
 608:	0e 94 4b 02 	call	0x496	; 0x496 <get_answer>
 60c:	18 2f       	mov	r17, r24
		if(choice=='1')
 60e:	81 33       	cpi	r24, 0x31	; 49
 610:	49 f4       	brne	.+18     	; 0x624 <menu+0x15e>
		{
		SPI_Write(1);
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	0e 94 15 02 	call	0x42a	; 0x42a <SPI_Write>
 618:	87 ea       	ldi	r24, 0xA7	; 167
 61a:	91 e6       	ldi	r25, 0x61	; 97
 61c:	01 97       	sbiw	r24, 0x01	; 1
 61e:	f1 f7       	brne	.-4      	; 0x61c <menu+0x156>
 620:	00 c0       	rjmp	.+0      	; 0x622 <menu+0x15c>
 622:	00 00       	nop
		_delay_ms(100);
		}
		if(choice=='2')
 624:	12 33       	cpi	r17, 0x32	; 50
 626:	49 f4       	brne	.+18     	; 0x63a <menu+0x174>
		{
		SPI_Write(2);
 628:	82 e0       	ldi	r24, 0x02	; 2
 62a:	0e 94 15 02 	call	0x42a	; 0x42a <SPI_Write>
 62e:	87 ea       	ldi	r24, 0xA7	; 167
 630:	91 e6       	ldi	r25, 0x61	; 97
 632:	01 97       	sbiw	r24, 0x01	; 1
 634:	f1 f7       	brne	.-4      	; 0x632 <menu+0x16c>
 636:	00 c0       	rjmp	.+0      	; 0x638 <menu+0x172>
 638:	00 00       	nop
		_delay_ms(100);
		}	
		if(choice=='0')
 63a:	10 33       	cpi	r17, 0x30	; 48
 63c:	11 f4       	brne	.+4      	; 0x642 <menu+0x17c>
		{Menu_flag=1;}		
 63e:	c1 e0       	ldi	r28, 0x01	; 1
 640:	d0 e0       	ldi	r29, 0x00	; 0
	}
	if(Menu_flag==6)
 642:	c6 30       	cpi	r28, 0x06	; 6
 644:	d1 05       	cpc	r29, r1
 646:	e9 f4       	brne	.+58     	; 0x682 <menu+0x1bc>
	{
		choice=get_answer();
 648:	0e 94 4b 02 	call	0x496	; 0x496 <get_answer>
 64c:	18 2f       	mov	r17, r24
		if(choice=='1')
 64e:	81 33       	cpi	r24, 0x31	; 49
 650:	49 f4       	brne	.+18     	; 0x664 <menu+0x19e>
		{		
			SPI_Write(3);
 652:	83 e0       	ldi	r24, 0x03	; 3
 654:	0e 94 15 02 	call	0x42a	; 0x42a <SPI_Write>
 658:	87 ea       	ldi	r24, 0xA7	; 167
 65a:	91 e6       	ldi	r25, 0x61	; 97
 65c:	01 97       	sbiw	r24, 0x01	; 1
 65e:	f1 f7       	brne	.-4      	; 0x65c <menu+0x196>
 660:	00 c0       	rjmp	.+0      	; 0x662 <menu+0x19c>
 662:	00 00       	nop
			_delay_ms(100);
		}
		if(choice=='2')
 664:	12 33       	cpi	r17, 0x32	; 50
 666:	49 f4       	brne	.+18     	; 0x67a <menu+0x1b4>
		{		
			SPI_Write(4);
 668:	84 e0       	ldi	r24, 0x04	; 4
 66a:	0e 94 15 02 	call	0x42a	; 0x42a <SPI_Write>
 66e:	87 ea       	ldi	r24, 0xA7	; 167
 670:	91 e6       	ldi	r25, 0x61	; 97
 672:	01 97       	sbiw	r24, 0x01	; 1
 674:	f1 f7       	brne	.-4      	; 0x672 <menu+0x1ac>
 676:	00 c0       	rjmp	.+0      	; 0x678 <menu+0x1b2>
 678:	00 00       	nop
			_delay_ms(100);
		}
		if(choice=='0')
 67a:	10 33       	cpi	r17, 0x30	; 48
 67c:	11 f4       	brne	.+4      	; 0x682 <menu+0x1bc>
		{Menu_flag=1;}
 67e:	c1 e0       	ldi	r28, 0x01	; 1
 680:	d0 e0       	ldi	r29, 0x00	; 0
	}
	if(Menu_flag==7)
 682:	c7 30       	cpi	r28, 0x07	; 7
 684:	d1 05       	cpc	r29, r1
 686:	e9 f4       	brne	.+58     	; 0x6c2 <menu+0x1fc>
	{
		choice=get_answer();
 688:	0e 94 4b 02 	call	0x496	; 0x496 <get_answer>
 68c:	18 2f       	mov	r17, r24
		if(choice=='1')
 68e:	81 33       	cpi	r24, 0x31	; 49
 690:	49 f4       	brne	.+18     	; 0x6a4 <menu+0x1de>
		{		
			SPI_Write(5);
 692:	85 e0       	ldi	r24, 0x05	; 5
 694:	0e 94 15 02 	call	0x42a	; 0x42a <SPI_Write>
 698:	87 ea       	ldi	r24, 0xA7	; 167
 69a:	91 e6       	ldi	r25, 0x61	; 97
 69c:	01 97       	sbiw	r24, 0x01	; 1
 69e:	f1 f7       	brne	.-4      	; 0x69c <menu+0x1d6>
 6a0:	00 c0       	rjmp	.+0      	; 0x6a2 <menu+0x1dc>
 6a2:	00 00       	nop
			_delay_ms(100);
		}
		if(choice=='2')
 6a4:	12 33       	cpi	r17, 0x32	; 50
 6a6:	49 f4       	brne	.+18     	; 0x6ba <menu+0x1f4>
		{		
			SPI_Write(6);
 6a8:	86 e0       	ldi	r24, 0x06	; 6
 6aa:	0e 94 15 02 	call	0x42a	; 0x42a <SPI_Write>
 6ae:	87 ea       	ldi	r24, 0xA7	; 167
 6b0:	91 e6       	ldi	r25, 0x61	; 97
 6b2:	01 97       	sbiw	r24, 0x01	; 1
 6b4:	f1 f7       	brne	.-4      	; 0x6b2 <menu+0x1ec>
 6b6:	00 c0       	rjmp	.+0      	; 0x6b8 <menu+0x1f2>
 6b8:	00 00       	nop
			_delay_ms(100);
		}
		if(choice=='0')
 6ba:	10 33       	cpi	r17, 0x30	; 48
 6bc:	11 f4       	brne	.+4      	; 0x6c2 <menu+0x1fc>
		{Menu_flag=1;}
 6be:	c1 e0       	ldi	r28, 0x01	; 1
 6c0:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	if(Menu_flag==8)
 6c2:	c8 30       	cpi	r28, 0x08	; 8
 6c4:	d1 05       	cpc	r29, r1
 6c6:	e9 f4       	brne	.+58     	; 0x702 <menu+0x23c>
	{
		choice=get_answer();
 6c8:	0e 94 4b 02 	call	0x496	; 0x496 <get_answer>
 6cc:	18 2f       	mov	r17, r24
		if(choice=='1')
 6ce:	81 33       	cpi	r24, 0x31	; 49
 6d0:	49 f4       	brne	.+18     	; 0x6e4 <menu+0x21e>
		{		
			SPI_Write(7);
 6d2:	87 e0       	ldi	r24, 0x07	; 7
 6d4:	0e 94 15 02 	call	0x42a	; 0x42a <SPI_Write>
 6d8:	87 ea       	ldi	r24, 0xA7	; 167
 6da:	91 e6       	ldi	r25, 0x61	; 97
 6dc:	01 97       	sbiw	r24, 0x01	; 1
 6de:	f1 f7       	brne	.-4      	; 0x6dc <menu+0x216>
 6e0:	00 c0       	rjmp	.+0      	; 0x6e2 <menu+0x21c>
 6e2:	00 00       	nop
			_delay_ms(100);
		}
		if(choice=='2')
 6e4:	12 33       	cpi	r17, 0x32	; 50
 6e6:	49 f4       	brne	.+18     	; 0x6fa <menu+0x234>
		{		
			SPI_Write(8);
 6e8:	88 e0       	ldi	r24, 0x08	; 8
 6ea:	0e 94 15 02 	call	0x42a	; 0x42a <SPI_Write>
 6ee:	87 ea       	ldi	r24, 0xA7	; 167
 6f0:	91 e6       	ldi	r25, 0x61	; 97
 6f2:	01 97       	sbiw	r24, 0x01	; 1
 6f4:	f1 f7       	brne	.-4      	; 0x6f2 <menu+0x22c>
 6f6:	00 c0       	rjmp	.+0      	; 0x6f8 <menu+0x232>
 6f8:	00 00       	nop
			_delay_ms(100);
		}
		if(choice=='0')
 6fa:	10 33       	cpi	r17, 0x30	; 48
 6fc:	11 f4       	brne	.+4      	; 0x702 <menu+0x23c>
		{Menu_flag=1;}
 6fe:	c1 e0       	ldi	r28, 0x01	; 1
 700:	d0 e0       	ldi	r29, 0x00	; 0
	}	
	if(Menu_flag==9)
 702:	c9 30       	cpi	r28, 0x09	; 9
 704:	d1 05       	cpc	r29, r1
 706:	e9 f4       	brne	.+58     	; 0x742 <menu+0x27c>
	{
		choice=get_answer();
 708:	0e 94 4b 02 	call	0x496	; 0x496 <get_answer>
 70c:	18 2f       	mov	r17, r24
		if(choice=='1')
 70e:	81 33       	cpi	r24, 0x31	; 49
 710:	49 f4       	brne	.+18     	; 0x724 <menu+0x25e>
		{		
			SPI_Write(9);
 712:	89 e0       	ldi	r24, 0x09	; 9
 714:	0e 94 15 02 	call	0x42a	; 0x42a <SPI_Write>
 718:	87 ea       	ldi	r24, 0xA7	; 167
 71a:	91 e6       	ldi	r25, 0x61	; 97
 71c:	01 97       	sbiw	r24, 0x01	; 1
 71e:	f1 f7       	brne	.-4      	; 0x71c <menu+0x256>
 720:	00 c0       	rjmp	.+0      	; 0x722 <menu+0x25c>
 722:	00 00       	nop
			_delay_ms(100);
		}
		if(choice=='2')
 724:	12 33       	cpi	r17, 0x32	; 50
 726:	49 f4       	brne	.+18     	; 0x73a <menu+0x274>
		{		
			SPI_Write(0);
 728:	80 e0       	ldi	r24, 0x00	; 0
 72a:	0e 94 15 02 	call	0x42a	; 0x42a <SPI_Write>
 72e:	87 ea       	ldi	r24, 0xA7	; 167
 730:	91 e6       	ldi	r25, 0x61	; 97
 732:	01 97       	sbiw	r24, 0x01	; 1
 734:	f1 f7       	brne	.-4      	; 0x732 <menu+0x26c>
 736:	00 c0       	rjmp	.+0      	; 0x738 <menu+0x272>
 738:	00 00       	nop
			_delay_ms(100);
		}
		if(choice=='0')
 73a:	10 33       	cpi	r17, 0x30	; 48
 73c:	11 f4       	brne	.+4      	; 0x742 <menu+0x27c>
		{Menu_flag=1;}
 73e:	c1 e0       	ldi	r28, 0x01	; 1
 740:	d0 e0       	ldi	r29, 0x00	; 0
	}
	if(Menu_flag==2)
 742:	c2 30       	cpi	r28, 0x02	; 2
 744:	d1 05       	cpc	r29, r1
 746:	a1 f4       	brne	.+40     	; 0x770 <menu+0x2aa>
	{
		LCD_Clear();
 748:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_Clear>
		LCD_Home();
 74c:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_Home>
		LCD_send_string_4bit("Dimmer:1~5");
 750:	81 e0       	ldi	r24, 0x01	; 1
 752:	91 e0       	ldi	r25, 0x01	; 1
 754:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_send_string_4bit>
		LCD_Next_Line();
 758:	0e 94 bf 01 	call	0x37e	; 0x37e <LCD_Next_Line>
		LCD_send_string_4bit("Ret:0");
 75c:	87 ec       	ldi	r24, 0xC7	; 199
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_send_string_4bit>
		choice=get_answer();
 764:	0e 94 4b 02 	call	0x496	; 0x496 <get_answer>
		if(choice=='0')
 768:	80 33       	cpi	r24, 0x30	; 48
 76a:	11 f4       	brne	.+4      	; 0x770 <menu+0x2aa>
		{Menu_flag=0;}
 76c:	c0 e0       	ldi	r28, 0x00	; 0
 76e:	d0 e0       	ldi	r29, 0x00	; 0
				
	}
	if(Menu_flag==3)
 770:	c3 30       	cpi	r28, 0x03	; 3
 772:	d1 05       	cpc	r29, r1
 774:	a1 f4       	brne	.+40     	; 0x79e <menu+0x2d8>
	{
		LCD_Clear();
 776:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_Clear>
		LCD_Home();
 77a:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_Home>
		LCD_send_string_4bit("Air Cond. Auto:1");
 77e:	8c e0       	ldi	r24, 0x0C	; 12
 780:	91 e0       	ldi	r25, 0x01	; 1
 782:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_send_string_4bit>
		LCD_Next_Line();
 786:	0e 94 bf 01 	call	0x37e	; 0x37e <LCD_Next_Line>
		LCD_send_string_4bit("On:2 Off:3 Ret:0");
 78a:	8d e1       	ldi	r24, 0x1D	; 29
 78c:	91 e0       	ldi	r25, 0x01	; 1
 78e:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_send_string_4bit>
		choice=get_answer();
 792:	0e 94 4b 02 	call	0x496	; 0x496 <get_answer>
		if(choice=='0')
 796:	80 33       	cpi	r24, 0x30	; 48
 798:	11 f4       	brne	.+4      	; 0x79e <menu+0x2d8>
		{Menu_flag=0;}
 79a:	c0 e0       	ldi	r28, 0x00	; 0
 79c:	d0 e0       	ldi	r29, 0x00	; 0
		
	}
	if(Menu_flag==4)
 79e:	c4 30       	cpi	r28, 0x04	; 4
 7a0:	d1 05       	cpc	r29, r1
 7a2:	09 f0       	breq	.+2      	; 0x7a6 <menu+0x2e0>
 7a4:	95 ce       	rjmp	.-726    	; 0x4d0 <menu+0xa>
	{
		LCD_Clear();
 7a6:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_Clear>
		LCD_Home();
 7aa:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_Home>
		LCD_send_string_4bit("Temp:4");
 7ae:	8e e2       	ldi	r24, 0x2E	; 46
 7b0:	91 e0       	ldi	r25, 0x01	; 1
 7b2:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_send_string_4bit>
		LCD_Next_Line();
 7b6:	0e 94 bf 01 	call	0x37e	; 0x37e <LCD_Next_Line>
		LCD_send_string_4bit("Door:5 Ret:0");
 7ba:	85 e3       	ldi	r24, 0x35	; 53
 7bc:	91 e0       	ldi	r25, 0x01	; 1
 7be:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_send_string_4bit>
		choice=get_answer();
 7c2:	0e 94 4b 02 	call	0x496	; 0x496 <get_answer>
		if(choice=='0')
 7c6:	80 33       	cpi	r24, 0x30	; 48
 7c8:	09 f0       	breq	.+2      	; 0x7cc <menu+0x306>
 7ca:	82 ce       	rjmp	.-764    	; 0x4d0 <menu+0xa>
 7cc:	7f ce       	rjmp	.-770    	; 0x4cc <menu+0x6>

000007ce <_exit>:
 7ce:	f8 94       	cli

000007d0 <__stop_program>:
 7d0:	ff cf       	rjmp	.-2      	; 0x7d0 <__stop_program>
